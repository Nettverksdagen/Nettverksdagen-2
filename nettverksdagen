#!/bin/bash

backup_root_dir="/opt/backups"
max_backups=10

backup() {
	local backup_time="$(date --rfc-3339='seconds' | sed 's/\ /_/g')"
	local backup_dir="$backup_root_dir/$backup_time"
	rsync -a fileserver/uploads "$backup_dir" &> /dev/null
	rsync -a ghost/data "$backup_dir" &> /dev/null
	docker exec postgres pg_dumpall -c -U postgres > "$backup_dir/api_db.sql"
	echo "$backup_time"
}

restore() {
	local backup_time="$1"
	local backup_dir="$backup_root_dir/$backup_time"
	rsync -a "$backup_dir/uploads" fileserver &> /dev/null
	rsync -a "$backup_dir/data" ghost &> /dev/null
	docker exec -i postgres psql -q -U postgres < "$backup_dir/api_db.sql" &> /dev/null
	echo "$backup_time"
}

start() {
	#git reset --hard origin/master
	git pull --ff-only
	docker compose -f docker-compose-prod.yml up --build --detach
}

stop() {
	local backup_time="$(backup)"
	docker compose -f docker-compose-prod.yml down --volumes &> /dev/null
	echo "$backup_time"
}

restart() {
	#git reset --hard origin/master
	git pull --ff-only
	docker compose -f docker-compose-prod.yml build --pull
	local backup_time="$(backup)"
	docker compose -f docker-compose-prod.yml down --volumes
	docker compose -f docker-compose-prod.yml up --build --detach
	restore "$backup_time"
}

prune() {
	local backups=$(/bin/ls $backup_root_dir)
	# 'backups' is an empty string if no backups are present,
	# and 'wc -l' returns 1 for an empty string, so we check if
	# 'backups' is empty before proceeding
	if [[ ! -z "$backups" ]]; then
		local num_backups=$(echo "$backups" | wc -l)
		if (( "$num_backups" > "$max_backups" )); then
	    	local old_backups=$(echo "$backups" | head -n $(("$num_backups" - "$max_backups")))
	    	for old_backup in $old_backups; do
				rm -r "$backup_root_dir/$old_backup"
	   		done
	   		echo "$old_backups"
		fi
	fi
}

case $1 in
  backup)
    backup_time="$(backup)"
    echo "$backup_time"
    ;;
  restore)
  	backup_time="$(restore $2)"
    echo "$backup_time"
    ;;
  start)
    start
    ;;
  stop)
    backup_time="$(stop)"
    echo "$backup_time"
    ;;
  restart)
	backup_time="$(stop)"
	start
	restore "$backup_time" &> /dev/null
	echo "$backup_time"
	;;
  fast-restart)
	restart
	;;
  prune)
    deleted_backups="$(prune)"
    # 'deleted_backups' is an empty string if no backups were deleted,
    # and 'wc -l' returns 1 for an empty string, so we have to check if
    # 'deleted_backups' is empty to avoid printing that a backup was
    # deleted
    if [[ ! -z "$deleted_backups" ]]; then
	    num_deleted_backups=$(echo "$deleted_backups" | wc -l)
	    echo "Deleted $num_deleted_backups backups"
    fi
    ;;
  *)
    echo "Unknown subcommand"
    exit 1
    ;;
esac
